// Specification Nevus Segmentation of Jan 12, 2021 21.13 FINAL
//
// Authors: Giovanna Broccia, Diego Latella, Mieke Massink
//
// Dataset: ISIC 2016 Challenge: Part 1 Segmentation
// Training dataset of 900 images
//
// Public set can be downloaded at:
// https://challenge.isic-archive.com/data
//
// Leaderboard:
// https://challenge.isic-archive.com/leaderboards/2016 
//
// Used for results in FormaliSE 2021 paper.
// 
// Images 0-10 (with exception of image 4) have been taken as "training" set
// ISIC 000, 01, 02, 03, 04, 05, 06,07, 08, 09,10,24,31,43,207,443,3005,8403
// The specification has been also tested on 50 images from the ISIC 2016 gallery 
// (including those
// used for training and excluding those that do not satisfy the assumptions below)
// Also the following images (of 900) have been used to develop the specification:
// ISIC 303, 1191, 1216, 2616, 3308, 4309, 5666, 5787,8294,8347,9944,10491, 11207
// ISIC 102, 148, 281, 495, 503, 1118, 1292, 1385, 2353, 2976, 3174, 4168, 7788

// Assumptions on the images:
// 1) Nevus does not overlap with possibly present black border. In other words, the nevus is
//   surrounded by (fair coloured) skin
// 2) There is only one nevus in the image (no nevi that are composed of multiple
//    disconnected parts)
// The second requirement in some cases is not a problem.
// 3) Images may have different sizes. Standard size assumed is 1022 x 767 pixels. 
//    It is assumed that the ratio between height and with of the image is always the
//    same.
//    The relative distances are obtained by multiplication with a factor:
//    (volume(border) ./. refImgPerimeter) where volume(border) is the length of 
//    the perimeter of the image under study and refImgPerimeter is the perimeter of
//    the standard image, i.e. 2 * (1022 + 767).
// 4) All sample images seem to deal only with fair skin colour. The current specification 
//    is not suitable for different colour skin due to lack of training images for that type.
//
// Analyse with VoxLogicA_0.6.0_osx-x64 of 2020/10/19
//
// using script: ./run_analysis.sh data nevusSegm.imgql
//

//===== NOTE: the groundTruth files have different names in different sets
// Adjust accordingly!
// get groundtruth file on data_first10
load groundTruth = "$INPUTDIR/$NAME_seg_RGB.png"
// On data_test set use:
//load groundTruth = "$INPUTDIR/$NAME_Segmentation_RGB.png"

// get original image of nevus
load nevus = "$INPUTDIR/$NAME.png"

// quantitative image of intensity levels of nevus and ground truth
let nevusImgIntens = intensity(nevus)
let groundIntens = intensity(groundTruth)

// Define manual segmentation for comparison considering only positive values
let manualSeg = groundIntens >. 0  


//========== begin function definitions ==============

//=== additional comparison of attribute values

let >(x,y) = (x - y) >. 0
let <(x,y) = (y - x) >. 0 

//=== similarity scores
 
//Function for computing the Dice-Soerensen index
let dice(x,y) = (2 .*. volume(x & y)) ./. (volume(x) .+. volume(y))

// Function diceM(x) computes the Dice-Soerensen score against the manual segmentation
let diceM(x) = dice(x,manualSeg)

// Jaccard coefficient in terms of the Dice-Soerensen index
let jaccard(x,y) = dice(x,y) ./. (2 .-. dice(x,y))

// TDR: trueDetectionRate is defined as (TP/(TP + FN)). This is also called Sensitivity.
let sensitivity(x,y) = volume(x & y) ./. (volume(x & y) .+. volume((!x) & (y)))

// Specificity is defined as (TN/(TN + FP))
let specificity(x,y) = volume((!x) & (!y)) ./. (volume((!x) & (!y)) .+. volume((x) & (!y)))

// Accuracy is defined as (TP+TN)/(TP + TN + FP + FN)
let accuracy(x,y) =  (volume(x & y) .+. volume((!x) & (!y))) ./. (volume(x & y) .+. volume((!x) & (!y)) .+. volume(x & (!y)) .+. volume((!x) & (y)))
 
// FPR: falsePositiveRate is defined as FP/(TN + FP)
let flsPositiveRate(x,y) =  volume((x) & (!y)) ./. (volume((!x) & (!y)) .+. volume((x) & (!y)))
 
// ER: errorRate is defined as (FP + FN) / (TP + TN + FP + FN)
let errRate(x,y) = (volume(x & (!y)) .+. volume((!x) & (y))) ./. (volume(x & y) .+. volume((!x) & (!y)) .+. volume((x) & (!y)) .+. volume((!x) & (y)))

//=== end similarity scores

//=== Compactness Measures

// Function ppM(x) computes the Polsby-Popper measure of compactness of a shape
// Also called: Isoperimetric quotient
let square(x) = x .*. x
let iboundary(x) = near(interior(x)) & !(interior(x))
let ppM(x) = (volume(x) .*. 4 .*. 3.14) ./. (square(volume(iboundary(x))))

//=== End compactness Measures

//=== Texture Analysis operator and parameter values

//Find pixels with neighborhood of radius rad has pattern similar to pixels satisfying property "a". Tried bins 5,10,15,20 but 15 seems optimal.

// NOTE: division by 255 below is only needed for viewing results with mricron viewer.
let similarTo(a,rad) = 
crossCorrelation(rad,nevusImgIntens /. 255,nevusImgIntens /.255,a,min(nevusImgIntens /. 255),max(nevusImgIntens /. 255),15) 

//=== End Texture Analysis operator and parameter values


//========== end function definitions ==============


//--------------NEVUS and BACKGROUND----------------- 

//------ NEVUS Mieke ------

//----- Take care of images of different size ------
// Rescale factor for distances w.r.t. an image of
// size 1022 x 767. This is done via the length of the perimeter of the reference image
// which is 2 .*. (1022 .+. 767). 
let refImgPerimeter = 2 .*. (1022 .+. 767)

// The perimiter of the image under analysis is defined as the volume of the border points.
// The resize factor is the ratio between perimeter of image under analysis and the perimeter
// of the reference image
let imgSizeFactor = (volume(border) ./. refImgPerimeter)

// Relative distance operator that takes this scaling factor into account
let relDist(x) = (imgSizeFactor .*. x)

//--- Take care of black corners in the image ------
let almostBlack = nevusImgIntens <. 40.0 
let blackBorder = grow(distleq(relDist(5),border), almostBlack)

//--- Find relatively intense pixels (upper 30%) ----
let imgPerc = percentiles(nevusImgIntens, !blackBorder, 0.5)
let brightest(p) = imgPerc >. p
//let brightPatch = imgPerc >. 0.85
//let brightest = imgPerc >. 0.70


//----- Dealing with coloured patches ------
let bNev = blue(nevus)
let rNev = red(nevus)
let gNev = green(nevus)


// patchBlue defines pixels in a blue patch (cerotto) and so on
// The thresholds have been established experimentally based on available images
// Blue (red, green resp.) patches have highest value of blue (red, green) component in rgb
// No absolute guarantees: would need more standardisation in images

let patchBlue = distleq(relDist(5),(bNev > (rNev +. 30)) & (bNev > (gNev)) & (bNev >. 150)) 
let patchRed = distleq(relDist(5),(rNev > (bNev +. 100)) & (rNev > (gNev +. 20))) & (rNev >. 130) 
let patchGreen = distleq(relDist(5),(gNev > (rNev +. 20)) & (gNev > bNev)& (gNev >. 100))

let patchPart(x,y) = ifB(volume(x) .<. (y .*. volume(tt)),x,ff)
// A patch should not cover more than 40 percent of the image, otherwise could be nevus
let patchSample = patchPart(patchBlue,0.4) |  patchPart(patchRed,0.4) | patchPart(patchGreen,0.4) 

// Patches are always located at the border of the image so we use this knowledge
let patchAtBorder = touch(smoothen(patchSample,relDist(10)), distleq(relDist(20),border))

// Check if it is really a patch by checking its compactness via ppM
let patch = ifB(ppM(patchAtBorder) .>. 0.5, patchAtBorder, ff)

// patchYW defines likely bright patches (e.g. white or yellow)
// These should also capture most white and yellow patches
// Also patchBright must be rather compact and not more than 40 percent of image
let patchYW = touch(smoothen(brightest(0.75), relDist(20)), distleq(relDist(20),border))
let patchSampleYW = patchPart(patchYW,0.4)
let patchBright = ifB((ppM(patchYW) .>. 0.3), patchSampleYW, ff)

//----- Background/skin colour sample -----

// take the relative border area that is most likely containing skin pixels around nevus
let bgSampleWidth =  relDist(200)

// bgSample should consist as much as possible of skin, excluding black borders, patches etc.
let bgSample = (distleq(bgSampleWidth, blackBorder) & (!blackBorder) & (!patch)) | (brightest(0.7) & (!patchBright)) 

// bgSimScore computes cross-correlation scores for bg in range [-1,+1]
let onlySkinOrNevus = (! patch) & (! patchBright) & (! blackBorder)
let bgSimScore = similarTo(bgSample, relDist(5))
let bgSim = (bgSimScore >. 0.05) & onlySkinOrNevus // only for producing illustrations


//----- First Pre-segmentation of nevus ------


// Find pxs surrounded by pxs with a cc score for the background that is close to zero. 
// These pxs are likely at the border between nevus and background.
// In preSeg1 we smoothen in order to get rid of hairs that may connect nevus to border 
let preSeg1 = smoothen(((!border) S (bgSimScore <. 0.25)) & onlySkinOrNevus & (! brightest(0.7)), relDist(10))
let preSeg2 = preSeg1 & !touch(preSeg1, border | blackBorder)

// If the nevus itself touches the border it was removed in preSeg2, so we check if we only removed
// pieces not of nevus that were in an area in the border and make sure that the actual
// nevus is still in preSeg
let preSeg = ifB(volume(touch(preSeg1, border | blackBorder) & !distleq(relDist(300), border)) .=.0,preSeg2, preSeg1)

// Remove pixels that are too close to border
// Remove noise (smoothen)
// Take largest area (maxvol)
  
// The idea of using the two segmentations below is that the smoothen with distance 10 is able 
// to "disconnect" possible thin protrusions (e.g. hairs) that run from the nevus to the border. 
// There may be problems if the preSeg is composed of many small parts of the nevus. They may
// get removed accidentally.
let nevSeg = smoothen(maxvol(preSeg), relDist(3))
let nevSegSmooth = smoothen(maxvol(preSeg), relDist(10))

// Take intersection of small and larger noise removal for accurate nevus borders without patches
let nevSeg1 = maxvol(nevSeg & nevSegSmooth) 

// If there is a patch present, the nevus never touches the border and has likely low contrast.
// We did not use this knowledge yet.
// Nevus we segment badly currently are the distributed ones with low contrast and irregular skin
// These were segmented reasonably in V5 by growing the nevus with points similar to itself.
// Can we identify images with low contrast and exclude them from the set to see the effect? 

//-----  First attempt of nevus segmentation ----

// Extend first segmentation with points sufficiently similar to nevus identified sofar
let nevSimScore = similarTo(nevSeg1, relDist(15))
let nevSim = nevSimScore >. 0.2 // best threshold?
let nevSegV0 = grow(nevSeg1, distleq(relDist(10),nevSim)) & !patch & !patchBright // & !brightest(0.7) (?)


//--------------OUTPUT-----------------

save "$OUTPUTDIR/$NAME_nevSegV0.png" nevSegV0
//save "$OUTPUTDIR/$NAME_patch.png" patch
//save "$OUTPUTDIR/$NAME_patchSample.png" patchSample

//save "$OUTPUTDIR/$NAME_bgSim.png" bgSim
//save "$OUTPUTDIR/$NAME_bgSample.png" bgSample
//save "$OUTPUTDIR/$NAME_brightest.png" brightest(0.70)
//save "$OUTPUTDIR/$NAME_patchBright.png" patchBright

//save "$OUTPUTDIR/$NAME_preSeg.png" preSeg 
//save "$OUTPUTDIR/$NAME_nevSeg.png" nevSeg
//save "$OUTPUTDIR/$NAME_nevSegSmooth.png" nevSegSmooth
//save "$OUTPUTDIR/$NAME_nevSim.png" nevSim 

 
//save "$OUTPUTDIR/bgSimScore.nii.gz" bgSimScore
//save "$OUTPUTDIR/bgSim.nii.gz" bgSim

//save "$OUTPUTDIR/bgSample.nii.gz" bgSample

//save "$OUTPUTDIR/blackBorder.nii.gz" blackBorder 
//save "$OUTPUTDIR/almostBlack.nii.gz" almostBlack

//save "$OUTPUTDIR/nevSegV0.nii.gz" nevSegV0 
//save "$OUTPUTDIR/preSeg.nii.gz" preSeg 
//save "$OUTPUTDIR/nevSeg1.nii.gz" nevSeg1

//save "$OUTPUTDIR/patch.nii.gz" patch

save "$OUTPUTDIR/nevusImgIntens.nii.gz" nevusImgIntens
save "$OUTPUTDIR/groundIntens.nii.gz" groundIntens

// Print some interesting Dice-Soerensen scores
print "DICE V0" diceM(nevSegV0)

// Print true detection rate, false positive rate and error rate
print "SE Sensitivity V0" sensitivity(nevSegV0,manualSeg)
print "SP Specificity V0" specificity(nevSegV0,manualSeg)
print "AC Accuracy V0" accuracy(nevSegV0,manualSeg)
//print "FPR V0" flsPositiveRate(nevSegV0,manualSeg)
print "ER V0" errRate(nevSegV0,manualSeg)

// Print Jaccard coefficent
print "Jaccard V0" jaccard(nevSegV0,manualSeg)

// Print compactness score between [0,1]
//print "Compact PPM V0" ppM(nevSegV0)






 

